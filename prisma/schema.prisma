// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(STAFF)
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  managerId  Int?
  manager    User?     @relation("ManagerStaff", fields: [managerId], references: [id])
  staffList  User[]    @relation("ManagerStaff")
  
  warehouseId Int?
  warehouse   Warehouse? @relation("UserWarehouse", fields: [warehouseId], references: [id])
  
  // Warehouse manager relation
  managedWarehouses Warehouse[] @relation("WarehouseManager")
  
  // Inventory relations
  inventoriesCreated     Inventory[]          @relation("InventoryCreatedBy")
  transferRequestsCreated TransferRequest[]   @relation("TransferRequestCreatedBy")
  transferRequestsApproved TransferRequest[]  @relation("TransferRequestApprovedBy")
  inventoryLogs          InventoryLog[]
  
  // Sales relations
  expenses Expense[] @relation("ExpenseCreatedBy")
  sales                  Sale[]               @relation("SaleCreatedBy")
}

model Warehouse {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  location  String
  status    Boolean  @default(true)
  managerId Int?
  manager   User?    @relation("WarehouseManager", fields: [managerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  users     User[]   @relation("UserWarehouse")
  inventoryItems WarehouseInventory[]
  transferRequestsFrom TransferRequest[] @relation("TransferFrom")
  transferRequestsTo   TransferRequest[] @relation("TransferTo")
  sales     Sale[]   @relation("WarehouseSales")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  description String?
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  inventories Inventory[]
}

model Inventory {
  id          Int      @id @default(autoincrement())
  name        String
  sku         String   @unique
  description String?
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  unit        String   // e.g., "pcs", "kg", "liter"
  
  // Pricing fields
  purchasePrice Decimal  @default(0) @db.Decimal(10, 2)  // Cost price
  sellingPrice  Decimal  @default(0) @db.Decimal(10, 2)  // Selling price
  currency      String   @default("INR")
  
  minStock    Int      @default(0)
  status      Boolean  @default(true)
  createdById Int
  createdBy   User     @relation("InventoryCreatedBy", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  warehouseInventories WarehouseInventory[]
  transferRequestItems TransferRequestItem[]
  logs                 InventoryLog[]
  saleItems            SaleItem[]
}

model WarehouseInventory {
  id          Int       @id @default(autoincrement())
  warehouseId Int
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  inventoryId Int
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  quantity    Int       @default(0)
  updatedAt   DateTime  @updatedAt
  
  @@unique([warehouseId, inventoryId])
}

model TransferRequest {
  id              Int      @id @default(autoincrement())
  requestNumber   String   @unique
  fromWarehouseId Int
  fromWarehouse   Warehouse @relation("TransferFrom", fields: [fromWarehouseId], references: [id])
  toWarehouseId   Int
  toWarehouse     Warehouse @relation("TransferTo", fields: [toWarehouseId], references: [id])
  status          TransferStatus @default(PENDING)
  reason          String?
  createdById     Int
  createdBy       User     @relation("TransferRequestCreatedBy", fields: [createdById], references: [id])
  approvedById    Int?
  approvedBy      User?    @relation("TransferRequestApprovedBy", fields: [approvedById], references: [id])
  approvedAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  items           TransferRequestItem[]
}

model TransferRequestItem {
  id                Int             @id @default(autoincrement())
  transferRequestId Int
  transferRequest   TransferRequest @relation(fields: [transferRequestId], references: [id], onDelete: Cascade)
  inventoryId       Int
  inventory         Inventory       @relation(fields: [inventoryId], references: [id])
  quantity          Int
  createdAt         DateTime        @default(now())
  
  @@unique([transferRequestId, inventoryId])
}

model InventoryLog {
  id          Int        @id @default(autoincrement())
  inventoryId Int
  inventory   Inventory  @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  warehouseId Int?
  action      LogAction
  quantity    Int
  previousQty Int
  newQty      Int
  remarks     String?
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
}

// ============= SALES MODELS =============

model Sale {
  id            Int          @id @default(autoincrement())
  saleNumber    String       @unique  // e.g., "SALE-20251031-0001"
  warehouseId   Int
  warehouse     Warehouse    @relation("WarehouseSales", fields: [warehouseId], references: [id])
  
  // Sale amounts
  subtotal      Decimal      @db.Decimal(10, 2)
  discount      Decimal      @default(0) @db.Decimal(10, 2)
  discountType  DiscountType @default(FIXED)
  discountValue Decimal      @default(0) @db.Decimal(10, 2)
  tax           Decimal      @default(0) @db.Decimal(10, 2)
  total         Decimal      @db.Decimal(10, 2)
  
  // Payment
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(COMPLETED)
  
  // Customer information (optional)
  customerName  String?
  customerPhone String?
  customerEmail String?
  customerAddress String?
  
  // Staff who made the sale
  createdById   Int
  createdBy     User         @relation("SaleCreatedBy", fields: [createdById], references: [id])
  
  // Additional info
  remarks       String?
  status        SaleStatus   @default(COMPLETED)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  items         SaleItem[]
}

model SaleItem {
  id          Int       @id @default(autoincrement())
  saleId      Int
  sale        Sale      @relation(fields: [saleId], references: [id], onDelete: Cascade)
  inventoryId Int
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  
  quantity    Int
  unitPrice   Decimal   @db.Decimal(10, 2)  // Price at time of sale
  totalPrice  Decimal   @db.Decimal(10, 2)  // quantity * unitPrice
  
  createdAt   DateTime  @default(now())
  
  @@unique([saleId, inventoryId])
}

model Expense {
  id          Int            @id @default(autoincrement())
  title       String
  category    ExpenseCategory
  amount      Decimal        @db.Decimal(10, 2)
  type        TransactionType
  date        DateTime
  description String?
  reference   String         @unique
  status      ExpenseStatus  @default(COMPLETED)
  createdById Int
  createdBy   User           @relation("ExpenseCreatedBy", fields: [createdById], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

// ============= ENUMS =============

enum ExpenseCategory {
  ORDERS
  EMPLOYEE
  UTILITIES
  LOGISTICS
  MAINTENANCE
  MARKETING
  REVENUE
  OTHER
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum ExpenseStatus {
  COMPLETED
  PENDING
  CANCELLED
}

enum Role {
  ADMIN
  MANAGER
  STAFF
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum LogAction {
  ADD
  REMOVE
  TRANSFER_OUT
  TRANSFER_IN
  ADJUSTMENT
  SALE
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  NET_BANKING
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum SaleStatus {
  COMPLETED
  CANCELLED
  REFUNDED
}